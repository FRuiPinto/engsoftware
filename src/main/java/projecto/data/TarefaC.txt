
    @Autowired
    private TarefaService tarefaService;

    @RequestMapping(value="/{id}", method= RequestMethod.GET)
    public ResponseEntity<Tarefa> find(@PathVariable Integer id) {
        Tarefa task = tarefaService.find(id);
        return ResponseEntity.ok().body(task);
    }
    @RequestMapping(value="/", method= RequestMethod.GET)
    public ResponseEntity<List<Tarefa>> findAll() {
        List<Tarefa> tarefas = tarefaService.findAll();
        return ResponseEntity.ok().body(tarefas);
    }
    @RequestMapping(method=RequestMethod.POST)
    public ResponseEntity<Void> insert(@Valid @RequestBody TarefaNewDTO task ) {
        Tarefa t1 = tarefaService.insert(task);
        URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}").buildAndExpand(t1.getId()).toUri();
        return ResponseEntity.created(uri).build();
    }

    @RequestMapping(value="/{id}", method=RequestMethod.DELETE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) {
        tarefaService.delete(id);
        return ResponseEntity.noContent().build();
    }
    @RequestMapping(value="/{id}/{horas}", method=RequestMethod.PATCH)
    public ResponseEntity<String> uptadeHoras(@PathVariable Integer id,@PathVariable Integer horas) throws ParseException {
        String resposta = tarefaService.updateHoras(id,horas);
        return ResponseEntity.ok().body(resposta);
    }
